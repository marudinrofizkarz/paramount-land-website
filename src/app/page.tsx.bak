import { redirect } from 'next/navigation';

// Redirect from root to the new (home) route
export default function Home() {
  redirect('/(home)');
}

// API response NewsItem
interface NewsItemResponse {
  id: string;
  title: string;
  description: string;
  category: string;
  published_at: string;
  icon?: string;
  bg_color?: string;
  featured_image?: string;
  slug: string;
}

// NewsSlider expects this format
interface NewsDisplayItem {
  id: string;
  title: string;
  description: string;
  category: string;
  date: string;
  icon: string;
  bgColor: string;
  featured_image?: string;
  slug: string;
}

export default function Home() {
  const [residentialProjects, setResidentialProjects] = useState<Project[]>([]);
  const [commercialProjects, setCommercialProjects] = useState<Project[]>([]);
  const [newsData, setNewsData] = useState<NewsDisplayItem[]>([]);
  const [allProjects, setAllProjects] = useState<Project[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchData() {
      try {
        setLoading(true);

        // Fetch residential projects
        const residentialResponse = await getPublicProjects(
          undefined,
          "residential"
        );
        if (residentialResponse.success && residentialResponse.data) {
          setResidentialProjects(residentialResponse.data);
        }

        // Fetch commercial projects
        const commercialResponse = await getPublicProjects(
          undefined,
          "commercial"
        );
        if (commercialResponse.success && commercialResponse.data) {
          setCommercialProjects(commercialResponse.data);
        }

        // Combine all projects for the header
        const combined = [
          ...(residentialResponse.success ? residentialResponse.data : []),
          ...(commercialResponse.success ? commercialResponse.data : []),
        ];
        setAllProjects(combined);

        // Fetch published news
        const newsResponse = await getPublishedNews();
        if (newsResponse.success && newsResponse.data) {
          // Transform news data to match NewsSlider interface
          const transformedNews = newsResponse.data.map((news: any) => ({
            id: news.id,
            title: news.title,
            description: news.description,
            category: news.category,
            date: news.published_at
              ? new Date(news.published_at).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "short",
                  day: "numeric",
                })
              : "No date",
            icon: news.icon || "ðŸ“°",
            bgColor: news.bg_color || "bg-gray-100 dark:bg-gray-800",
            featured_image: news.featured_image,
            slug: news.slug || news.id,
          }));
          setNewsData(transformedNews as NewsDisplayItem[]);
        }

        if (
          residentialResponse.success &&
          commercialResponse.success &&
          newsResponse.success
        ) {
          setError(null);
        } else {
          setError("Failed to load data");
        }
      } catch (err) {
        console.error("Error fetching data:", err);
        setError("Failed to load data");
      } finally {
        setLoading(false);
      }
    }

    fetchData();
  }, []);

  if (loading) {
    return (
      <div className="flex flex-col min-h-screen">
        <Header projects={[]} />
        <main className="flex-1 flex items-center justify-center">
          <div className="text-center">
            {/* Spinner modern dengan efek pulse */}
            <div className="relative mx-auto mb-4 w-16 h-16">
              <div
                className="absolute inset-0 rounded-full bg-primary/20 animate-ping opacity-75"
                style={{ animationDuration: "1.5s" }}
              ></div>
              <div className="absolute inset-0 rounded-full border-4 border-primary/80 border-t-transparent animate-spin"></div>
              <div className="absolute inset-2 rounded-full bg-background flex items-center justify-center">
                <div className="w-3 h-3 rounded-full bg-primary animate-pulse"></div>
              </div>
            </div>

            <p className="text-muted-foreground">Loading projects...</p>
          </div>
        </main>
        <Footer />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col min-h-screen">
        <Header projects={[]} />
        <main className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <p className="text-red-500 mb-4">{error}</p>
            <button
              onClick={() => window.location.reload()}
              className="px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90"
            >
              Retry
            </button>
          </div>
        </main>
        <Footer />
      </div>
    );
  }

  return (
    <div className="flex flex-col min-h-screen">
      <Header projects={allProjects} />
      <main className="flex-1">
        <HeroSliderSection />

        {/* Commercial Projects Section */}
        <section className="w-full py-12 md:py-24 lg:py-32">
          <div className="container mx-auto px-4 md:px-8 lg:px-12">
            <div className="flex flex-col items-center justify-center space-y-4 text-center mb-12">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl font-headline">
                Commercial Projects
              </h2>
              <p className="max-w-[700px] text-muted-foreground md:text-lg">
                Explore our innovative commercial developments for business
                excellence
              </p>
            </div>

            {commercialProjects.length > 0 ? (
              <ProjectSlider projects={commercialProjects} type="commercial" />
            ) : (
              <div className="text-center py-12">
                <p className="text-muted-foreground mb-4">
                  No commercial projects available at the moment.
                </p>
                <p className="text-sm text-muted-foreground">
                  <Link
                    href="/dashboard"
                    className="text-primary hover:underline"
                  >
                    Go to dashboard to add a project
                  </Link>
                  .
                </p>
              </div>
            )}
          </div>
        </section>

        {/* Residential Projects Section */}
        <section className="w-full py-12 md:py-24 lg:py-32 bg-muted/40">
          <div className="container mx-auto px-4 md:px-8 lg:px-12">
            <div className="flex flex-col items-center justify-center space-y-4 text-center mb-12">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl font-headline">
                Residential Projects
              </h2>
              <p className="max-w-[700px] text-muted-foreground md:text-lg">
                Discover our premium residential developments designed for
                modern living
              </p>
            </div>

            {residentialProjects.length > 0 ? (
              <ProjectSlider
                projects={residentialProjects}
                type="residential"
              />
            ) : (
              <div className="text-center py-12">
                <p className="text-muted-foreground mb-4">
                  No residential projects available at the moment.
                </p>
                <p className="text-sm text-muted-foreground">
                  <Link
                    href="/dashboard"
                    className="text-primary hover:underline"
                  >
                    Go to dashboard to add a project
                  </Link>
                  .
                </p>
              </div>
            )}
          </div>
        </section>

        {/* Sales In House Section */}
        <SalesInHouseSection />

        {/* Use NewsSlider Component with real data */}
        <NewsSlider newsData={newsData} />
      </main>
      <Footer />
    </div>
  );
}
