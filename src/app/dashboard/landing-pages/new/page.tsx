"use client";

import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import {
  IconArrowLeft,
  IconDeviceFloppy,
  IconEye,
  IconGlobe,
  IconPlus,
  IconGripVertical,
  IconTrash,
  IconSettings,
  IconPalette,
  IconCode,
  IconDeviceMobile,
  IconDeviceDesktop,
  IconDeviceTablet,
} from "@tabler/icons-react";
import { toast } from "sonner";
import { useRouter } from "next/navigation";
import Link from "next/link";
import Swal from "sweetalert2";
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
  DragEndEvent,
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";
import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { LandingPageBuilder } from "@/components/landing-page/landing-page-builder";

interface ComponentTemplate {
  id: string;
  name: string;
  type: string;
  config: any;
  preview_image?: string;
  is_system: boolean;
}

interface LandingPageComponent {
  id: string;
  type:
    | "hero"
    | "form"
    | "features"
    | "testimonial"
    | "cta"
    | "content"
    | "gallery"
    | "pricing"
    | "faq"
    | "statistics"
    | "video"
    | "timeline"
    | "location";
  config: any;
  order: number;
}

export default function NewLandingPagePage() {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [previewMode, setPreviewMode] = useState<
    "desktop" | "tablet" | "mobile"
  >("desktop");

  // Form data
  const [title, setTitle] = useState("");
  const [slug, setSlug] = useState("");
  const [isAutoGeneratedSlug, setIsAutoGeneratedSlug] = useState(true);
  const [description, setDescription] = useState("");
  const [metaTitle, setMetaTitle] = useState("");
  const [metaDescription, setMetaDescription] = useState("");
  const [ogImage, setOgImage] = useState("");
  const [templateType, setTemplateType] = useState("custom");
  const [targetAudience, setTargetAudience] = useState("");
  const [campaignSource, setCampaignSource] = useState("");
  const [trackingCode, setTrackingCode] = useState("");
  const [expiresAt, setExpiresAt] = useState("");

  // Components
  const [components, setComponents] = useState<LandingPageComponent[]>([]);
  const [componentTemplates, setComponentTemplates] = useState<
    ComponentTemplate[]
  >([]);
  const [activeTab, setActiveTab] = useState("builder");

  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  useEffect(() => {
    fetchComponentTemplates();
  }, []);

  useEffect(() => {
    if (title) {
      // Auto-generate slug from title
      const generatedSlug = title
        .toLowerCase()
        .replace(/[^a-z0-9\s\-]/g, "") // Allow hyphens
        .replace(/\s+/g, "-")
        .replace(/-+/g, "-") // Replace multiple hyphens with single hyphen
        .replace(/^-|-$/g, "") // Remove leading/trailing hyphens
        .trim();

      // Only auto-fill if slug is empty or if it matches a previously auto-generated slug
      if (!slug || slug === generatedSlug || isAutoGeneratedSlug) {
        setSlug(generatedSlug);
        setIsAutoGeneratedSlug(true);
      }
    }
  }, [title]);

  const fetchComponentTemplates = async () => {
    try {
      const response = await fetch("/api/landing-pages/components");
      if (!response.ok) throw new Error("Failed to fetch component templates");

      const data = await response.json();
      setComponentTemplates(data.data || []);
    } catch (error) {
      console.error("Error fetching component templates:", error);
      toast.error("Failed to load component templates");
    }
  };

  const addComponent = (template: ComponentTemplate) => {
    const newComponent: LandingPageComponent = {
      id: `${template.type}-${Date.now()}-${Math.random()
        .toString(36)
        .substr(2, 9)}`,
      type: template.type as LandingPageComponent["type"],
      config: JSON.parse(JSON.stringify(template.config)), // Deep clone template config
      order: components.length,
    };
    console.log(`[NewPage] Adding component:`, newComponent);
    setComponents([...components, newComponent]);
    toast.success(`${template.name} added to page`);
  };

  const updateComponent = (id: string, config: any) => {
    console.log(`[NewPage] Updating component ${id} with config:`, config);

    // Deep clone the config to prevent reference issues
    const clonedConfig = JSON.parse(JSON.stringify(config));

    setComponents((prevComponents) =>
      prevComponents.map((comp) =>
        comp.id === id ? { ...comp, config: clonedConfig } : comp
      )
    );
  };

  const removeComponent = (id: string) => {
    setComponents(components.filter((comp) => comp.id !== id));
    toast.success("Component removed");
  };

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;

    if (active.id !== over?.id) {
      setComponents((items) => {
        const oldIndex = items.findIndex((item) => item.id === active.id);
        const newIndex = items.findIndex((item) => item.id === over?.id);

        const newItems = arrayMove(items, oldIndex, newIndex);
        return newItems.map((item, index) => ({ ...item, order: index }));
      });
    }
  };

  const handleSave = async (status: "draft" | "published") => {
    if (!title || !slug) {
      await Swal.fire({
        title: "Input Tidak Lengkap",
        text: "Mohon isi Judul dan URL Slug sebelum menyimpan landing page.",
        icon: "warning",
        confirmButtonText: "OK",
        confirmButtonColor: "#3085d6",
      });
      return;
    }

    setSaving(true);
    try {
      const landingPageData = {
        title,
        slug,
        description,
        content: components,
        meta_title: metaTitle,
        meta_description: metaDescription,
        og_image: ogImage,
        status,
        template_type: templateType,
        target_audience: targetAudience,
        campaign_source: campaignSource,
        tracking_code: trackingCode,
        expires_at: expiresAt || undefined,
        settings: {
          theme: "default",
          colors: {
            primary: "#007bff",
            secondary: "#6c757d",
            accent: "#28a745",
          },
        },
      };

      const response = await fetch("/api/landing-pages", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(landingPageData),
      });

      if (!response.ok) {
        const error = await response.json();

        // Handle specific error for duplicate slug
        if (
          response.status === 409 ||
          error.error?.includes("slug already exists")
        ) {
          await Swal.fire({
            title: "URL Slug Sudah Digunakan!",
            html: `
              <div class="text-left">
                <p class="mb-3">URL slug <strong>"${slug}"</strong> sudah digunakan oleh landing page lain.</p>
                <p class="mb-2"><strong>Saran:</strong></p>
                <ul class="list-disc list-inside text-sm space-y-1">
                  <li><code>${slug}-new</code></li>
                  <li><code>${slug}-${new Date().getFullYear()}</code></li>
                  <li><code>${slug}-v2</code></li>
                  <li><code>${slug}-${templateType}</code></li>
                </ul>
                <p class="mt-3 text-xs text-gray-600">Silakan gunakan slug yang berbeda dan coba lagi.</p>
              </div>
            `,
            icon: "error",
            confirmButtonText: "Ubah Slug",
            confirmButtonColor: "#3085d6",
            showCancelButton: true,
            cancelButtonText: "Batal",
            cancelButtonColor: "#6c757d",
            width: 500,
          }).then((result) => {
            if (result.isConfirmed) {
              // Focus on slug input to help user change it
              const slugInput = document.getElementById("slug");
              if (slugInput) {
                slugInput.focus();
                (slugInput as HTMLInputElement).select();
              }
            }
          });
          return;
        }

        // Handle other errors
        throw new Error(error.error || "Failed to save landing page");
      }

      const data = await response.json();

      // Success notification
      await Swal.fire({
        title: "Berhasil!",
        text: `Landing page berhasil ${
          status === "published" ? "dipublikasikan" : "disimpan sebagai draft"
        }.`,
        icon: "success",
        confirmButtonText: "OK",
        confirmButtonColor: "#28a745",
        timer: 3000,
        timerProgressBar: true,
      });

      router.push("/dashboard/landing-pages");
    } catch (error: any) {
      console.error("Error saving landing page:", error);

      // Generic error handling with SweetAlert
      await Swal.fire({
        title: "Terjadi Kesalahan",
        text:
          error.message || "Gagal menyimpan landing page. Silakan coba lagi.",
        icon: "error",
        confirmButtonText: "OK",
        confirmButtonColor: "#dc3545",
      });
    } finally {
      setSaving(false);
    }
  };

  const getPreviewWidth = () => {
    switch (previewMode) {
      case "mobile":
        return "375px";
      case "tablet":
        return "768px";
      default:
        return "100%";
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-950">
      {/* Header */}
      <div className="bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800 px-4 py-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm" asChild>
              <Link href="/dashboard/landing-pages">
                <IconArrowLeft className="h-4 w-4" />
              </Link>
            </Button>
            <div>
              <h1 className="text-lg font-semibold">Create Landing Page</h1>
              <p className="text-sm text-muted-foreground">
                Build high-converting landing pages for your campaigns
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            {/* Preview Mode Toggle */}
            <div className="flex items-center border rounded-lg p-1">
              <Button
                variant={previewMode === "desktop" ? "default" : "ghost"}
                size="sm"
                onClick={() => setPreviewMode("desktop")}
              >
                <IconDeviceDesktop className="h-4 w-4" />
              </Button>
              <Button
                variant={previewMode === "tablet" ? "default" : "ghost"}
                size="sm"
                onClick={() => setPreviewMode("tablet")}
              >
                <IconDeviceTablet className="h-4 w-4" />
              </Button>
              <Button
                variant={previewMode === "mobile" ? "default" : "ghost"}
                size="sm"
                onClick={() => setPreviewMode("mobile")}
              >
                <IconDeviceMobile className="h-4 w-4" />
              </Button>
            </div>
            <Button
              onClick={() => handleSave("draft")}
              disabled={saving}
              variant="outline"
            >
              <IconDeviceFloppy className="mr-2 h-4 w-4" />
              Save Draft
            </Button>
            <Button onClick={() => handleSave("published")} disabled={saving}>
              <IconGlobe className="mr-2 h-4 w-4" />
              Publish
            </Button>
          </div>
        </div>
      </div>

      <div className="flex h-[calc(100vh-73px)]">
        {/* Left Sidebar - Settings & Components */}
        <div className="w-80 bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-800 overflow-y-auto">
          <Tabs
            value={activeTab}
            onValueChange={setActiveTab}
            className="w-full"
          >
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="settings">Settings</TabsTrigger>
              <TabsTrigger value="components">Components</TabsTrigger>
              <TabsTrigger value="builder">Builder</TabsTrigger>
            </TabsList>

            {/* Settings Tab */}
            <TabsContent value="settings" className="p-4 space-y-4">
              <div className="space-y-4">
                <div>
                  <Label htmlFor="title">Title *</Label>
                  <Input
                    id="title"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    placeholder="Landing page title"
                  />
                  <p className="text-xs text-muted-foreground mt-1">
                    Secara otomatis akan ditambahkan suffix "| Paramount Land -
                    Building Homes and People with Heart" (kecuali sudah
                    mengandung "Paramount Land")
                  </p>
                </div>

                <div>
                  <Label htmlFor="slug">URL Slug *</Label>
                  <Input
                    id="slug"
                    value={slug}
                    onChange={(e) => {
                      setSlug(e.target.value);
                      setIsAutoGeneratedSlug(false); // User is manually editing
                    }}
                    placeholder="url-slug"
                  />
                  <p className="text-xs text-muted-foreground mt-1">
                    Will be accessible at: /lp/{slug || "your-slug"}
                  </p>
                </div>

                <div>
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    placeholder="Brief description of the landing page"
                    rows={3}
                  />
                </div>

                <Separator />

                <div>
                  <Label htmlFor="template-type">Template Type</Label>
                  <Select value={templateType} onValueChange={setTemplateType}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="custom">Custom</SelectItem>
                      <SelectItem value="real-estate">Real Estate</SelectItem>
                      <SelectItem value="property">Property</SelectItem>
                      <SelectItem value="general">General</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="campaign-source">Campaign Source</Label>
                  <Select
                    value={campaignSource}
                    onValueChange={setCampaignSource}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select source" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="google-ads">Google Ads</SelectItem>
                      <SelectItem value="facebook-ads">Facebook Ads</SelectItem>
                      <SelectItem value="tiktok-ads">TikTok Ads</SelectItem>
                      <SelectItem value="instagram-ads">
                        Instagram Ads
                      </SelectItem>
                      <SelectItem value="organic">Organic</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="target-audience">Target Audience</Label>
                  <Input
                    id="target-audience"
                    value={targetAudience}
                    onChange={(e) => setTargetAudience(e.target.value)}
                    placeholder="e.g., First-time buyers, Investors"
                  />
                </div>

                <Separator />

                <div>
                  <Label htmlFor="meta-title">Meta Title</Label>
                  <Input
                    id="meta-title"
                    value={metaTitle}
                    onChange={(e) => setMetaTitle(e.target.value)}
                    placeholder="SEO title (optional - akan menggunakan Title jika kosong)"
                  />
                  {(metaTitle || title) && (
                    <div className="mt-2 p-2 bg-blue-50 dark:bg-blue-950 rounded text-sm">
                      <span className="font-medium text-blue-900 dark:text-blue-100">
                        Preview Title:{" "}
                      </span>
                      <span className="text-blue-700 dark:text-blue-300">
                        {(() => {
                          const displayTitle = metaTitle || title;
                          return displayTitle.includes("Paramount Land")
                            ? displayTitle
                            : `${displayTitle} | Paramount Land - Building Homes and People with Heart`;
                        })()}
                      </span>
                    </div>
                  )}
                </div>

                <div>
                  <Label htmlFor="meta-description">Meta Description</Label>
                  <Textarea
                    id="meta-description"
                    value={metaDescription}
                    onChange={(e) => setMetaDescription(e.target.value)}
                    placeholder="SEO description"
                    rows={3}
                  />
                </div>

                <div>
                  <Label htmlFor="tracking-code">Tracking Code</Label>
                  <Textarea
                    id="tracking-code"
                    value={trackingCode}
                    onChange={(e) => setTrackingCode(e.target.value)}
                    placeholder="Google Analytics, Facebook Pixel, etc."
                    rows={3}
                  />
                </div>

                <div>
                  <Label htmlFor="expires-at">Expires At</Label>
                  <Input
                    id="expires-at"
                    type="datetime-local"
                    value={expiresAt}
                    onChange={(e) => setExpiresAt(e.target.value)}
                  />
                </div>
              </div>
            </TabsContent>

            {/* Components Tab */}
            <TabsContent value="components" className="p-4">
              <div className="space-y-3">
                <h3 className="font-medium">Component Library</h3>
                <p className="text-sm text-muted-foreground">
                  Available components: {componentTemplates.length}
                </p>
                {componentTemplates.length === 0 ? (
                  <div className="text-center py-8">
                    <p className="text-sm text-muted-foreground">
                      Loading components...
                    </p>
                  </div>
                ) : (
                  componentTemplates.map((template) => (
                    <Card
                      key={template.id}
                      className="cursor-pointer hover:shadow-md transition-shadow"
                      onClick={() => addComponent(template)}
                    >
                      <CardContent className="p-3">
                        <div className="flex items-center justify-between">
                          <div>
                            <h4 className="font-medium text-sm">
                              {template.name}
                            </h4>
                            <p className="text-xs text-muted-foreground capitalize">
                              {template.type}
                            </p>
                          </div>
                          <div className="flex items-center gap-1">
                            {template.is_system && (
                              <Badge variant="secondary" className="text-xs">
                                System
                              </Badge>
                            )}
                            <IconPlus className="h-4 w-4" />
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))
                )}
              </div>
            </TabsContent>

            {/* Builder Tab */}
            <TabsContent value="builder" className="p-4">
              <div className="space-y-3">
                <h3 className="font-medium">Page Components</h3>
                {components.length === 0 ? (
                  <p className="text-sm text-muted-foreground">
                    No components added yet. Switch to Components tab to add
                    some.
                  </p>
                ) : (
                  <DndContext
                    sensors={sensors}
                    collisionDetection={closestCenter}
                    onDragEnd={handleDragEnd}
                  >
                    <SortableContext
                      items={components.map((c) => c.id)}
                      strategy={verticalListSortingStrategy}
                    >
                      {components.map((component) => (
                        <SortableComponentItem
                          key={component.id}
                          component={component}
                          onRemove={removeComponent}
                        />
                      ))}
                    </SortableContext>
                  </DndContext>
                )}
              </div>
            </TabsContent>
          </Tabs>
        </div>

        {/* Main Content - Preview */}
        <div className="flex-1 bg-gray-100 dark:bg-gray-950 overflow-hidden">
          <div className="h-full overflow-auto">
            <div className="p-4">
              <div
                className="mx-auto bg-white dark:bg-gray-900 shadow-lg border border-gray-200 dark:border-gray-700"
                style={{
                  width: getPreviewWidth(),
                  minHeight: "600px",
                  transition: "width 0.3s ease",
                }}
              >
                <LandingPageBuilder
                  components={components}
                  onUpdateComponentAction={updateComponent}
                  previewMode={previewMode}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// Sortable Component Item for Builder Tab
function SortableComponentItem({
  component,
  onRemove,
}: {
  component: LandingPageComponent;
  onRemove: (id: string) => void;
}) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ id: component.id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
  };

  return (
    <div
      ref={setNodeRef}
      style={style}
      className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-3 flex items-center justify-between"
    >
      <div className="flex items-center gap-2">
        <div {...attributes} {...listeners} className="cursor-grab">
          <IconGripVertical className="h-4 w-4 text-muted-foreground" />
        </div>
        <div>
          <h4 className="font-medium text-sm capitalize">{component.type}</h4>
          <p className="text-xs text-muted-foreground">
            {component.config?.title || "Untitled"}
          </p>
        </div>
      </div>
      <Button
        variant="ghost"
        size="sm"
        onClick={() => onRemove(component.id)}
        className="text-destructive hover:text-destructive"
      >
        <IconTrash className="h-4 w-4" />
      </Button>
    </div>
  );
}
