import { createClient } from "@libsql/client";
import { DATABASE_CONFIG } from "./env-config";

// Validate database configuration
if (!DATABASE_CONFIG.url && process.env.NODE_ENV === "production") {
  throw new Error(
    "❌ TURSO_DATABASE_URL is required for production deployment"
  );
}

if (!DATABASE_CONFIG.authToken && process.env.NODE_ENV === "production") {
  throw new Error("❌ TURSO_AUTH_TOKEN is required for production deployment");
}

// Create connection to Turso database
const db = createClient({
  url: DATABASE_CONFIG.url,
  authToken: DATABASE_CONFIG.authToken,
});

export default db;

// Safe JSON parse utility function
function safeJsonParse(jsonString: string | null | undefined, fallback: any = null): any {
  if (!jsonString) return fallback;
  try {
    return JSON.parse(jsonString);
  } catch (error) {
    console.error("Error parsing JSON:", error);
    return fallback;
  }
}

// Utility function to safely serialize data for client components
export function serializeData(data: any) {
  if (!data) return null;
  
  try {
    // Handle arrays
    if (Array.isArray(data)) {
      return data.map(item => {
        // Create a clean copy of each item
        const cleanItem: Record<string, any> = {};
        
        // Copy all properties manually
        Object.keys(item).forEach(key => {
          cleanItem[key] = item[key];
          
          // Special handling for known JSON string fields
          if (key === 'galleryImages' || key === 'advantages' || key === 'features') {
            if (typeof item[key] === 'string') {
              cleanItem[key] = safeJsonParse(item[key], []);
            }
          }
        });
        
        return cleanItem;
      });
    }
    
    // Handle single objects
    const cleanObject: Record<string, any> = {};
    
    Object.keys(data).forEach(key => {
      cleanObject[key] = data[key];
      
      // Special handling for known JSON string fields
      if (key === 'galleryImages' || key === 'advantages' || key === 'features') {
        if (typeof data[key] === 'string') {
          cleanObject[key] = safeJsonParse(data[key], []);
        }
      }
    });
    
    return cleanObject;
  } catch (error) {
    console.error("Error serializing data:", error);
    // If all else fails, return the original data
    return data;
  }
}

// Helper function to run queries
export async function query(sql: string, params: any[] = []) {
  try {
    const result = await db.execute({ sql, args: params });
    return result;
  } catch (error) {
    console.error("Database query error:", error);
    throw error;
  }
}

// Helper function to get a single data item
export async function getOne(sql: string, params: any[] = []) {
  try {
    const result = await query(sql, params);
    const data = result.rows[0] || null;
    return data ? serializeData(data) : null;
  } catch (error) {
    console.error("Database getOne error:", error);
    throw error;
  }
}

// Helper function to get multiple data items
export async function getMany(sql: string, params: any[] = []) {
  try {
    const result = await query(sql, params);
    return serializeData(result.rows);
  } catch (error) {
    console.error("Database getMany error:", error);
    throw error;
  }
}

// Helper function for insert operations
export async function insert(sql: string, params: any[] = []) {
  const result = await query(sql, params);
  return result;
}

// Helper function for update operations
export async function update(sql: string, params: any[] = []) {
  const result = await query(sql, params);
  return result;
}

// Helper function for delete operations
export async function remove(sql: string, params: any[] = []) {
  const result = await query(sql, params);
  return result;
}
